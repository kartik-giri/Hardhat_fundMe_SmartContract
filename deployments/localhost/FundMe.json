{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pricefeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Fundme__Notowner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minmumUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8af2f728292c64e1ce6773a0f85e63048eb2579b2a44efa4b395773c20f9b121",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "871024",
    "logsBloom": "0x
    "blockHash": "0x76a8abc424d5f06a9f9896126f9f559c9d93886b05412383a16c510f1683a66f",
    "transactionHash": "0x8af2f728292c64e1ce6773a0f85e63048eb2579b2a44efa4b395773c20f9b121",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "871024",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "15d63a42bea4630481754eeb0ab8938d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pricefeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fundme__Notowner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minmumUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kartik Giri\",\"details\":\"This implements price as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"}},\"notice\":\"This contract is demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Pragma\\npragma solidity ^0.8.0;\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//Error codes\\nerror Fundme__Notowner();\\n\\n//Interfaces, Libraries, Contract\\n\\n// Use it for making uderstand other developers\\n/**\\n * @title A contract for crowd funding\\n * @author Kartik Giri\\n * @notice This contract is demo a sample funding contract\\n * @dev This implements price as our library\\n */\\ncontract FundMe {\\n    // Type Decalaration\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant minmumUSD = 50 * 1e18;\\n    address[] private funders;\\n    mapping(address => uint) private addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private pricefeed;\\n\\n    // Events\\n\\n    // Modifier\\n    modifier onlyowner() {\\n        if (msg.sender != i_owner) {\\n            revert Fundme__Notowner();\\n        }\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address pricefeedAddress) {\\n        i_owner = msg.sender;\\n        pricefeed = AggregatorV3Interface(pricefeedAddress);\\n    }\\n\\n    \\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(pricefeed) >= minmumUSD,\\n            \\\"Not enough ether!\\\"\\n        );\\n        if (addressToAmountFunded[msg.sender] == 0) {\\n            funders.push(msg.sender);\\n        }\\n        addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    // function withdraw() public onlyowner {\\n    //     // require(msg.sender == owner, \\\"you are not owner\\\");\\n    //     for (uint funderIndex; funderIndex < funders.length; funderIndex++) {\\n    //         address funder = funders[funderIndex];\\n    //         addressToAmountFunded[funder] = 0;\\n    //     }\\n    //     funders = new address[](0);\\n\\n    //     // transfer\\n    //     //  payable (msg.sender).transfer(address(this).balance);\\n    //     //  // send\\n    //     //  // it retrun bool\\n    //     //  bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    //     //  require(sendSuccess, \\\"Send failed\\\");\\n    //     // call\\n    //     (bool callSuccess, ) = payable(msg.sender).call{\\n    //         value: address(this).balance\\n    //     }(\\\"\\\");\\n    //     require(callSuccess, \\\"Call failed\\\");\\n    // }\\n\\n    function cheaperWithdraw() public payable onlyowner {\\n        address[] memory m_funders = funders;\\n         for (uint funderIndex; funderIndex < m_funders.length; funderIndex++) {\\n            address funder = m_funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        \\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    \\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return addressToAmountFunded[fundingAddress];\\n    }\\n\\n     function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return pricefeed;\\n    }\\n\\n}\\n// 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\",\"keccak256\":\"0x871f1255d3207d7cce11941d6dc915532f69c88238e7918212c3fdb086722816\",\"license\":\"GPL-3.0\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// library can not have state variable and can not send ether and its functions are internal ....\\r\\n\\r\\nlibrary PriceConverter{\\r\\n    \\r\\n    function getprice(AggregatorV3Interface _pricefeed) internal view returns(uint256) {\\r\\n    // to communicate with other contract we need 2 things.\\r\\n    // 1. ABI\\r\\n    // 2. Address:0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e \\r\\n\\r\\n    // AggregatorV3Interface pricefeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n     (,int price,,,)= _pricefeed.latestRoundData();\\r\\n     return uint256(price * 1e10);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmt, AggregatorV3Interface _pricefeed) internal view returns(uint256){\\r\\n        uint ethprice = getprice(_pricefeed);\\r\\n        uint256 ethAmtInUSD = (ethprice * ethAmt) / 1e18;\\r\\n        return ethAmtInUSD;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb1c1b94e07e5b29b535c56f1e724daf22ef1e6954bb286e688f42627cc090d7f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610fbe380380610fbe83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610e5f61015f600039600081816101de01526103b10152610e5f6000f3fe6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd14610108578063b60d428814610133578063be2693f01461013d578063d7b4750c1461014757610070565b80630343fb25146100755780633776f352146100b2578063893d20e8146100dd575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610871565b610184565b6040516100a991906108b7565b60405180910390f35b3480156100be57600080fd5b506100c76101cd565b6040516100d491906108b7565b60405180910390f35b3480156100e957600080fd5b506100f26101da565b6040516100ff91906108e1565b60405180910390f35b34801561011457600080fd5b5061011d610202565b60405161012a919061095b565b60405180910390f35b61013b61022c565b005b6101456103af565b005b34801561015357600080fd5b5061016e600480360381019061016991906109a2565b610653565b60405161017b91906108e1565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061026b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069a90919063ffffffff16565b10156102ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a390610a2c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610357576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a69190610a7b565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610434576040517fbf2c461700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156104b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161046d575b5050505050905060005b81518110156105425760008282815181106104df576104de610aaf565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053a90610ade565b9150506104c1565b50600067ffffffffffffffff81111561055e5761055d610b26565b5b60405190808252806020026020018201604052801561058c5781602001602082028036833780820191505090505b50600090805190602001906105a2929190610767565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c990610b86565b60006040518083038185875af1925050503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b505090508061064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064690610be7565b60405180910390fd5b5050565b600080828154811061066857610667610aaf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806106a6836106d6565b90506000670de0b6b3a764000085836106bf9190610c07565b6106c99190610c78565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610d36565b5050509150506402540be4008161075f9190610db1565b915050919050565b8280548282559060005260206000209081019282156107e0579160200282015b828111156107df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610787565b5b5090506107ed91906107f1565b5090565b5b8082111561080a5760008160009055506001016107f2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083e82610813565b9050919050565b61084e81610833565b811461085957600080fd5b50565b60008135905061086b81610845565b92915050565b6000602082840312156108875761088661080e565b5b60006108958482850161085c565b91505092915050565b6000819050919050565b6108b18161089e565b82525050565b60006020820190506108cc60008301846108a8565b92915050565b6108db81610833565b82525050565b60006020820190506108f660008301846108d2565b92915050565b6000819050919050565b600061092161091c61091784610813565b6108fc565b610813565b9050919050565b600061093382610906565b9050919050565b600061094582610928565b9050919050565b6109558161093a565b82525050565b6000602082019050610970600083018461094c565b92915050565b61097f8161089e565b811461098a57600080fd5b50565b60008135905061099c81610976565b92915050565b6000602082840312156109b8576109b761080e565b5b60006109c68482850161098d565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820657468657221000000000000000000000000000000600082015250565b6000610a166011836109cf565b9150610a21826109e0565b602082019050919050565b60006020820190508181036000830152610a4581610a09565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a868261089e565b9150610a918361089e565b9250828201905080821115610aa957610aa8610a4c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ae98261089e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1b57610b1a610a4c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b70600083610b55565b9150610b7b82610b60565b600082019050919050565b6000610b9182610b63565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bd1600b836109cf565b9150610bdc82610b9b565b602082019050919050565b60006020820190508181036000830152610c0081610bc4565b9050919050565b6000610c128261089e565b9150610c1d8361089e565b9250828202610c2b8161089e565b91508282048414831517610c4257610c41610a4c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c838261089e565b9150610c8e8361089e565b925082610c9e57610c9d610c49565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610cc881610ca9565b8114610cd357600080fd5b50565b600081519050610ce581610cbf565b92915050565b6000819050919050565b610cfe81610ceb565b8114610d0957600080fd5b50565b600081519050610d1b81610cf5565b92915050565b600081519050610d3081610976565b92915050565b600080600080600060a08688031215610d5257610d5161080e565b5b6000610d6088828901610cd6565b9550506020610d7188828901610d0c565b9450506040610d8288828901610d21565b9350506060610d9388828901610d21565b9250506080610da488828901610cd6565b9150509295509295909350565b6000610dbc82610ceb565b9150610dc783610ceb565b9250828202610dd581610ceb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e0d57610e0c610a4c565b5b8282058414831517610e2257610e21610a4c565b5b509291505056fea264697066735822122074f97202ddc12561a5eda1060928d56b2ba9e366eebcf2eb3b6cd3f6a26d336064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639e87a5cd1161004e5780639e87a5cd14610108578063b60d428814610133578063be2693f01461013d578063d7b4750c1461014757610070565b80630343fb25146100755780633776f352146100b2578063893d20e8146100dd575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610871565b610184565b6040516100a991906108b7565b60405180910390f35b3480156100be57600080fd5b506100c76101cd565b6040516100d491906108b7565b60405180910390f35b3480156100e957600080fd5b506100f26101da565b6040516100ff91906108e1565b60405180910390f35b34801561011457600080fd5b5061011d610202565b60405161012a919061095b565b60405180910390f35b61013b61022c565b005b6101456103af565b005b34801561015357600080fd5b5061016e600480360381019061016991906109a2565b610653565b60405161017b91906108e1565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061026b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069a90919063ffffffff16565b10156102ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a390610a2c565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610357576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a69190610a7b565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610434576040517fbf2c461700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156104b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161046d575b5050505050905060005b81518110156105425760008282815181106104df576104de610aaf565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053a90610ade565b9150506104c1565b50600067ffffffffffffffff81111561055e5761055d610b26565b5b60405190808252806020026020018201604052801561058c5781602001602082028036833780820191505090505b50600090805190602001906105a2929190610767565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c990610b86565b60006040518083038185875af1925050503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b505090508061064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064690610be7565b60405180910390fd5b5050565b600080828154811061066857610667610aaf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806106a6836106d6565b90506000670de0b6b3a764000085836106bf9190610c07565b6106c99190610c78565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610d36565b5050509150506402540be4008161075f9190610db1565b915050919050565b8280548282559060005260206000209081019282156107e0579160200282015b828111156107df5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610787565b5b5090506107ed91906107f1565b5090565b5b8082111561080a5760008160009055506001016107f2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083e82610813565b9050919050565b61084e81610833565b811461085957600080fd5b50565b60008135905061086b81610845565b92915050565b6000602082840312156108875761088661080e565b5b60006108958482850161085c565b91505092915050565b6000819050919050565b6108b18161089e565b82525050565b60006020820190506108cc60008301846108a8565b92915050565b6108db81610833565b82525050565b60006020820190506108f660008301846108d2565b92915050565b6000819050919050565b600061092161091c61091784610813565b6108fc565b610813565b9050919050565b600061093382610906565b9050919050565b600061094582610928565b9050919050565b6109558161093a565b82525050565b6000602082019050610970600083018461094c565b92915050565b61097f8161089e565b811461098a57600080fd5b50565b60008135905061099c81610976565b92915050565b6000602082840312156109b8576109b761080e565b5b60006109c68482850161098d565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820657468657221000000000000000000000000000000600082015250565b6000610a166011836109cf565b9150610a21826109e0565b602082019050919050565b60006020820190508181036000830152610a4581610a09565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a868261089e565b9150610a918361089e565b9250828201905080821115610aa957610aa8610a4c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ae98261089e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1b57610b1a610a4c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b70600083610b55565b9150610b7b82610b60565b600082019050919050565b6000610b9182610b63565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bd1600b836109cf565b9150610bdc82610b9b565b602082019050919050565b60006020820190508181036000830152610c0081610bc4565b9050919050565b6000610c128261089e565b9150610c1d8361089e565b9250828202610c2b8161089e565b91508282048414831517610c4257610c41610a4c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c838261089e565b9150610c8e8361089e565b925082610c9e57610c9d610c49565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610cc881610ca9565b8114610cd357600080fd5b50565b600081519050610ce581610cbf565b92915050565b6000819050919050565b610cfe81610ceb565b8114610d0957600080fd5b50565b600081519050610d1b81610cf5565b92915050565b600081519050610d3081610976565b92915050565b600080600080600060a08688031215610d5257610d5161080e565b5b6000610d6088828901610cd6565b9550506020610d7188828901610d0c565b9450506040610d8288828901610d21565b9350506060610d9388828901610d21565b9250506080610da488828901610cd6565b9150509295509295909350565b6000610dbc82610ceb565b9150610dc783610ceb565b9250828202610dd581610ceb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e0d57610e0c610a4c565b5b8282058414831517610e2257610e21610a4c565b5b509291505056fea264697066735822122074f97202ddc12561a5eda1060928d56b2ba9e366eebcf2eb3b6cd3f6a26d336064736f6c63430008120033",
  "devdoc": {
    "author": "Kartik Giri",
    "details": "This implements price as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      }
    },
    "notice": "This contract is demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "pricefeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}